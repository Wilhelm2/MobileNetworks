//
// Generated file, do not edit! Created by nedtool 5.5 from Messages/AckSS.msg.
//

#ifndef __INET_ACKSS_M_H
#define __INET_ACKSS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class AckSS;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "FIFOCom_m.h" // import FIFOCom

// cplusplus {{
  
    #include "../commun_f.h"
// }}


namespace inet {

// cplusplus {{
    
    #include <vector> 
    typedef std::vector<tuple<unsigned int,unsigned int,unsigned int>> TupleVectorAck_SS;
// }}

/**
 * Class generated from <tt>Messages/AckSS.msg:45</tt> by nedtool.
 * <pre>
 * class AckSS extends FIFOCom
 * {
 *     unsigned int idS;
 *     TupleVectorAck_SS vSeq;
 * }
 * </pre>
 */
class AckSS : public ::inet::FIFOCom
{
  protected:
    unsigned int idS = 0;
    TupleVectorAck_SS vSeq;

  private:
    void copy(const AckSS& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AckSS&);

  public:
    AckSS();
    AckSS(const AckSS& other);
    virtual ~AckSS();
    AckSS& operator=(const AckSS& other);
    virtual AckSS *dup() const override {return new AckSS(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getIdS() const;
    virtual void setIdS(unsigned int idS);
    virtual const TupleVectorAck_SS& getVSeq() const;
    virtual TupleVectorAck_SS& getVSeqForUpdate() { handleChange();return const_cast<TupleVectorAck_SS&>(const_cast<AckSS*>(this)->getVSeq());}
    virtual void setVSeq(const TupleVectorAck_SS& vSeq);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AckSS& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AckSS& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ACKSS_M_H

