//
// Generated file, do not edit! Created by nedtool 5.5 from Messages/Ack_S.msg.
//

#ifndef __INET_ACK_S_M_H
#define __INET_ACK_S_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Ack_S;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "StationWirelessMessage_m.h" // import StationWirelessMessage

// cplusplus {{
    
    #include "../commun_f.h"
// }}


namespace inet {

// cplusplus {{
    
    #include <vector> 
    typedef std::vector<idMsg> idMsgVectorAck_S;
// }}

/**
 * Class generated from <tt>Messages/Ack_S.msg:37</tt> by nedtool.
 * <pre>
 * class Ack_S extends StationWirelessMessage
 * {
 *     idMsgVectorAck_S vSeq;
 * }
 * </pre>
 */
class Ack_S : public ::inet::StationWirelessMessage
{
  protected:
    idMsgVectorAck_S vSeq;

  private:
    void copy(const Ack_S& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ack_S&);

  public:
    Ack_S();
    Ack_S(const Ack_S& other);
    virtual ~Ack_S();
    Ack_S& operator=(const Ack_S& other);
    virtual Ack_S *dup() const override {return new Ack_S(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const idMsgVectorAck_S& getVSeq() const;
    virtual idMsgVectorAck_S& getVSeqForUpdate() { handleChange();return const_cast<idMsgVectorAck_S&>(const_cast<Ack_S*>(this)->getVSeq());}
    virtual void setVSeq(const idMsgVectorAck_S& vSeq);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ack_S& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ack_S& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ACK_S_M_H

