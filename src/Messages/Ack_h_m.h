//
// Generated file, do not edit! Created by nedtool 5.5 from Messages/Ack_h.msg.
//

#ifndef __INET_ACK_H_M_H
#define __INET_ACK_H_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Ack_h;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "HostMessage_m.h" // import HostMessage

// cplusplus {{
  
    #include "../commun_f.h"
// }}


namespace inet {

// cplusplus {{
    typedef vector<AckInterval> AckIntervalAck_h;
// }}

/**
 * Class generated from <tt>Messages/Ack_h.msg:38</tt> by nedtool.
 * <pre>
 * class Ack_h extends HostMessage
 * {
 *     unsigned int id_h;
 *     AckIntervalAck_h intervals; // interval des messages reçus (pas délivrés obligatoirement) ==> utilisé pour contrôler quels messages sont broadcast
 *     unsigned int seq_S; /// seq du dernier message délivré
 *     unsigned int Ses;
 * }
 * </pre>
 */
class Ack_h : public ::inet::HostMessage
{
  protected:
    unsigned int id_h = 0;
    AckIntervalAck_h intervals;
    unsigned int seq_S = 0;
    unsigned int Ses = 0;

  private:
    void copy(const Ack_h& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ack_h&);

  public:
    Ack_h();
    Ack_h(const Ack_h& other);
    virtual ~Ack_h();
    Ack_h& operator=(const Ack_h& other);
    virtual Ack_h *dup() const override {return new Ack_h(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getId_h() const;
    virtual void setId_h(unsigned int id_h);
    virtual const AckIntervalAck_h& getIntervals() const;
    virtual AckIntervalAck_h& getIntervalsForUpdate() { handleChange();return const_cast<AckIntervalAck_h&>(const_cast<Ack_h*>(this)->getIntervals());}
    virtual void setIntervals(const AckIntervalAck_h& intervals);
    virtual unsigned int getSeq_S() const;
    virtual void setSeq_S(unsigned int seq_S);
    virtual unsigned int getSes() const;
    virtual void setSes(unsigned int Ses);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ack_h& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ack_h& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ACK_H_M_H

