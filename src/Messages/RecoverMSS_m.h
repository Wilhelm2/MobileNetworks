//
// Generated file, do not edit! Created by nedtool 5.5 from Messages/RecoverMSS.msg.
//

#ifndef __INET_RECOVERMSS_M_H
#define __INET_RECOVERMSS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class RecoverMSS;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "FIFOCom_m.h" // import FIFOCom

// cplusplus {{
  
    #include "../commun_f.h"
    #include "../MobileSupportStations/MSSSBuffer.h"
    #include "../MobileSupportStations/Session.h"
// }}


namespace inet {

// cplusplus {{
    
    #include <vector> 
    typedef std::vector<unsigned int> IntVectorRecoverMSS;
    typedef MSSSBuffer MSSSBufferRecoverMSS;
    
    typedef std::map<unsigned int, std::vector<Session> > MobilesbVector;
// }}

/**
 * Class generated from <tt>Messages/RecoverMSS.msg:51</tt> by nedtool.
 * <pre>
 * class RecoverMSS extends FIFOCom
 * {
 *     unsigned int MSScible;
 *     MSSSBufferRecoverMSS SBuffer;
 *     unsigned int seq_S;
 *     unsigned int s_resp;
 *     IntVectorRecoverMSS received;
 *     MobilesbVector Mobiles;
 * 
 * }
 * </pre>
 */
class RecoverMSS : public ::inet::FIFOCom
{
  protected:
    unsigned int MSScible = 0;
    MSSSBufferRecoverMSS SBuffer;
    unsigned int seq_S = 0;
    unsigned int s_resp = 0;
    IntVectorRecoverMSS received;
    MobilesbVector Mobiles;

  private:
    void copy(const RecoverMSS& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RecoverMSS&);

  public:
    RecoverMSS();
    RecoverMSS(const RecoverMSS& other);
    virtual ~RecoverMSS();
    RecoverMSS& operator=(const RecoverMSS& other);
    virtual RecoverMSS *dup() const override {return new RecoverMSS(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getMSScible() const;
    virtual void setMSScible(unsigned int MSScible);
    virtual const MSSSBufferRecoverMSS& getSBuffer() const;
    virtual MSSSBufferRecoverMSS& getSBufferForUpdate() { handleChange();return const_cast<MSSSBufferRecoverMSS&>(const_cast<RecoverMSS*>(this)->getSBuffer());}
    virtual void setSBuffer(const MSSSBufferRecoverMSS& SBuffer);
    virtual unsigned int getSeq_S() const;
    virtual void setSeq_S(unsigned int seq_S);
    virtual unsigned int getS_resp() const;
    virtual void setS_resp(unsigned int s_resp);
    virtual const IntVectorRecoverMSS& getReceived() const;
    virtual IntVectorRecoverMSS& getReceivedForUpdate() { handleChange();return const_cast<IntVectorRecoverMSS&>(const_cast<RecoverMSS*>(this)->getReceived());}
    virtual void setReceived(const IntVectorRecoverMSS& received);
    virtual const MobilesbVector& getMobiles() const;
    virtual MobilesbVector& getMobilesForUpdate() { handleChange();return const_cast<MobilesbVector&>(const_cast<RecoverMSS*>(this)->getMobiles());}
    virtual void setMobiles(const MobilesbVector& Mobiles);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RecoverMSS& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RecoverMSS& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_RECOVERMSS_M_H

