//
// Generated file, do not edit! Created by nedtool 5.5 from Messages/Register.msg.
//

#ifndef __INET_REGISTER_M_H
#define __INET_REGISTER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Register;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "FIFOCom_m.h" // import FIFOCom

// cplusplus {{
  
    #include "../commun_f.h"
    #include "../MobileSupportStations/Session.h"
// }}


namespace inet {

// cplusplus {{
    typedef Session s_MHRegister;
    typedef vector<struct s_sendMsgMSS> sendMsgVectorRegister;
// }}

/**
 * Class generated from <tt>Messages/Register.msg:46</tt> by nedtool.
 * <pre>
 * class Register extends FIFOCom
 * {
 *     s_MHRegister hi;
 * }
 * </pre>
 */
class Register : public ::inet::FIFOCom
{
  protected:
    s_MHRegister hi;

  private:
    void copy(const Register& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Register&);

  public:
    Register();
    Register(const Register& other);
    virtual ~Register();
    Register& operator=(const Register& other);
    virtual Register *dup() const override {return new Register(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const s_MHRegister& getHi() const;
    virtual s_MHRegister& getHiForUpdate() { handleChange();return const_cast<s_MHRegister&>(const_cast<Register*>(this)->getHi());}
    virtual void setHi(const s_MHRegister& hi);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Register& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Register& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_REGISTER_M_H

